Union By Size-

->We have the size array inialized with 1 and parent array inialized with the
node itself.

->Size basically depicts that how much nodes are attached in total to a particular node
including that node itself.

->Here unlike union by rank where we increases the rank by 1 only when the rank
of the nodes are same, In union by size every time the size of the ultimate parent
will be updated in size array by adding the total number of new nodes that
are attached.

->parent array updated as usual as in case of union by rank.

->Here also the smaller size is going to connect the larger size in order to
reduce the time for path compression and to shrink the size of all over 
data structure so formed.

->Union by size is more intutive than union by rank.

code-

 void unionBySize(int u,int v){

            int ulp_u=findParent(u);
            int ulp_v=findParent(v);

            if(ulp_u==ulp_v) return;

            if(size.get(ulp_u)<size.get(ulp_v)){
                parent.set(ulp_u,ulp_v);
                int val=size.get(ulp_v)+size.get(ulp_u);
                size.set(ulp_v,val);
            }
            else if(size.get(ulp_v)<size.get(ulp_u)){
                parent.set(ulp_v,ulp_u);
                int val=size.get(ulp_u)+size.get(ulp_v);
                size.set(ulp_u,val);
            }else{
                parent.set(ulp_v,ulp_u);
                int val=size.get(ulp_u)+size.get(ulp_v);
                size.set(ulp_u,val);
            }

         }