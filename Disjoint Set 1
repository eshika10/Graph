Code for Union By Rank-

->The rank basically depicts the level.
->We have attached the smaller rank to larger rank in order to reduce the size of the structure so
formed and to reduce the time for path compression.

class DisjointSet{
         
         List<Integer> rank=ArrayList<>();
         List<Integer> parent=ArrayList<>();

         //Initialization
         public DisjointSet(int n){ // n is no. of nodes
              for(int i=0;i<=n;i++){
                 rank.add(0);
                 parent.add(i);
              }
         }

         //Path Compression
         int findParent(int node){
            if(node==parent.get(node)){
                return node;
            }

            int ulp=findParent(parent.get(node));
            parent.set(node,ulp);

            return parent.get(node);
         }

         //Performing Union
         void unionByRank(int u,int v){

            int ulp_u=findParent(u);
            int ulp_v=findParent(v);

            if(ulp_u==ulp_v) return;

            if(rank.get(ulp_u)<rank.get(ulp_v)){
                parent.set(ulp_u,ulp_v);
            }
            else if(rank.get(ulp_v)<rank.get(ulp_u)){
                parent.set(ulp_v,ulp_u);
            }else{
                parent.set(ulp_v,ulp_u);
                int val=rank.get(ulp_u)+1;
                rank.set(ulp_u,val);
            }

         }
}