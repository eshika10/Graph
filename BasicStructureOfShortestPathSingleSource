->It is similar to standard BFS but instead of visited array we used distance array
which is initially marked as infinity.

->Then instead of checking for visited we checked if the present distance of
the vertex is more than the new find distance(dist[parent]+wt) if it is so then update its 
value in the distance array.

Code:

    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        
        //Converting the edges into adjacency list.
        for(int i=0;i<m;i++){
            
        
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        
        Queue<Integer> q=new LinkedList<>();
        
        q.offer(src);
        
        int[] dist=new int[n];
        for(int i=0;i<n;i++){
            dist[i]=(int)(1e9);
        }
        
        dist[src]=0;
        
        while(!q.isEmpty()){
            
           int node=q.poll();
            
            for(int it:adj.get(node)){
                
                if(dist[node]+1<dist[it]){
                    dist[it]=dist[node]+1;
                    q.offer(it);
                }
                
            }
            
        }
        
        for(int i=0;i<n;i++){
            if(dist[i]==1e9){
                dist[i]=-1;
            }
        }
        
        return dist;
    }

