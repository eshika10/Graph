Linear ordering of the vertices such that if there exists an edge between u and v
then the u will come before v in the ordering.

Take place only in DAG(Directed Acyclic Graph)

example- 5--->0<----4
         |          |
         |          |
         |          |
         \/         \/     ordering-5 4 2 3 1 0
         2---->3---->1              4 5 2 3 1 0


Implementation using dfs-

Time Complexity=O(V+E)

private void dfs(int node,List<List<Integer>> list,boolean[] visited,Stack<Integer> s){
           
            visited[node]=true;

            for(int val:list.get(node)){
                if(visited[val]==false){
                    dfs(val,list,visited,s);
                }
            }

            s.push(node);
}

public List<Integer> main(List<List<Integer>> list,int n){

    boolean[] visited=new boolean[n];

    Stack<Integer> s=new Stack<>();

    for(int i=0;i<n;i++){
        if(visited[i]==false){
            dfs(i,list,visited,s);
        }
    }

    List<Integer> ans=new ArrayList<>();

    while(!s.isEmpty()){
        ans.add(s.pop());
    }

    return ans;

}